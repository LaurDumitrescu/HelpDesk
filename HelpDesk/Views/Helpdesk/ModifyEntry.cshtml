@model HelpdeskApp.Models.EntryModel

@{
    Layout = null;
    var userName = ViewBag.UserName;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modify Entry</title>
    <!-- Include Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Include jQuery UI CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css" />
    <!-- Include Flatpickr CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
</head>
<body class="d-flex flex-column min-vh-100">
    @Html.Partial("_Header")

    <div class="container mt-5">
        <h2 class="mb-4">Modify Entry</h2>
        <div class="card p-4 shadow-sm">
            <form id="modifyEntryForm" class="needs-validation" novalidate>
                @Html.AntiForgeryToken()
                <input type="hidden" id="entryId" value="@Model.Id" />

                <div class="mb-3">
                    <label for="Firma" class="form-label">Firma:</label>
                    <input type="text" id="Firma" name="Firma" value="@Model.Firma" class="form-control" required>
                </div>
                <div class="mb-3">
                    <label for="PctLucru" class="form-label">Punct de Lucru:</label>
                    <input type="text" id="PctLucru" name="PctLucru" value="@Model.PctLucru" class="form-control" required>
                </div>
                <div class="mb-3">
                    <label for="NrTelefon" class="form-label">Numar Telefon:</label>
                    <input type="text" id="NrTelefon" name="NrTelefon" value="@Model.NrTelefon" class="form-control" required>
                </div>
                <div class="mb-3">
                    <label for="Data" class="form-label">Data:</label>
                    <input type="date" id="Data" name="Data" value="@Model.Data.ToString("yyyy-MM-dd")" class="form-control" required>
                </div>
                <div class="mb-3">
                    <label for="OraApel" class="form-label">Ora Apel:</label>
                    <input type="text" id="OraApel" name="OraApel" value="@Model.OraApel" class="form-control" maxlength="5" required>
                </div>
                <div class="mb-3">
                    <label for="DurataApel" class="form-label">Durata Apel:</label>
                    <input type="text" id="DurataApel" name="DurataApel" value="@Model.DurataApel" class="form-control" maxlength="8" required>
                </div>
                <div class="mb-3">
                    <label for="Problema" class="form-label">Problema:</label>
                    <textarea id="Problema" name="Problema" class="form-control expanding">@Model.Problema</textarea>
                </div>
                <div class="mb-3">
                    <label for="Rezolvare" class="form-label">Rezolvare:</label>
                    <textarea id="Rezolvare" name="Rezolvare" class="form-control expanding">@Model.Rezolvare</textarea>
                </div>

                <div class="text-center">
                    <button type="button" id="confirmButton" class="btn btn-success me-2">Confirm</button>
                    <button type="button" id="cancelButton" class="btn btn-secondary">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Confirmation Dialog -->
    <div id="confirmDialog" class="modal fade" tabindex="-1" aria-labelledby="confirmDialogLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmDialogLabel">Confirm Update</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to update this entry?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="confirmUpdateButton">Yes</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Error Dialog for Validation -->
    <div id="errorDialog" class="modal fade" tabindex="-1" aria-labelledby="errorDialogLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="errorDialogLabel">Error</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="errorMessage"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Ok</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="mt-auto">
        @Html.Partial("_Footer")
    </footer>

    <!-- Include Bootstrap JavaScript and dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <script>
        $(document).ready(function () {
            const validateDate = (date) => !isNaN(Date.parse(date));
            const validateDuration = (duration) => /^([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/.test(duration);

            const showError = (message) => {
                $("#errorMessage").html(message);
                $("#errorDialog").modal('show');
            };

            const confirmUpdate = async () => {
                const form = document.getElementById('modifyEntryForm');
                const formData = new FormData(form);
                const entryId = document.getElementById('entryId').value;

                const data = {};
                formData.forEach((value, key) => data[key] = value);

                const errors = [];
                if (!data.Firma) errors.push('Campul Firma nu poate fi gol.');
                if (!data.PctLucru) errors.push('Campul Punct de Lucru nu poate fi gol.');
                if (!data.NrTelefon) errors.push('Campul Numar Telefon nu poate fi gol.');
                if (!validateDate(data.Data)) errors.push('Data invalida.');
                if (!validateDuration(data.DurataApel)) errors.push('Durata Apel invalida.');

                if (errors.length > 0) {
                    showError(errors.join('<br>'));
                    return;
                }

                try {
                    const response = await fetch(`/Helpdesk/UpdateField/${entryId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': form.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ Id: entryId, Fields: data })
                    });

                    if (response.ok) {
                        window.location.href = '/Helpdesk/ViewEntries';
                    } else {
                        const error = await response.text();
                        showError('Error: ' + error);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showError('Error: ' + error.message);
                }
            };

            document.getElementById('confirmButton').addEventListener('click', function () {
                $("#confirmDialog").modal('show');
            });

            document.getElementById('confirmUpdateButton').addEventListener('click', function () {
                $("#confirmDialog").modal('hide');
                confirmUpdate();
            });

            document.getElementById('cancelButton').addEventListener('click', function () {
                window.history.back();
            });

            // Auto-expand textareas as content is added
            document.querySelectorAll('textarea.expanding').forEach(textarea => {
                textarea.addEventListener('input', function () {
                    this.style.height = 'auto';
                    this.style.height = (this.scrollHeight) + 'px';
                });
                textarea.style.height = (textarea.scrollHeight) + 'px';
            });

            // Auto-suggestion and auto-complete for Firma, PctLucru, NrTelefon
            $("#Firma").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/Helpdesk/GetSuggestions",
                        data: { term: request.term, field: "Firma" },
                        success: function (data) {
                            response(data);
                        }
                    });
                },
                minLength: 3,
                select: function (event, ui) {
                    var firma = ui.item.value;
                    $.ajax({
                        url: "/Helpdesk/GetSingleSuggestion",
                        data: { firma: firma },
                        success: function (data) {
                            $("#PctLucru").val(data.pctLucru || '');
                            $("#NrTelefon").val(data.nrTelefon || '');
                        }
                    });
                },
                change: function (event, ui) {
                    if (!ui.item) {
                        $("#PctLucru").val('');
                        $("#NrTelefon").val('');
                    }
                }
            });

            $("#PctLucru").autocomplete({
                source: function (request, response) {
                    var firma = $("#Firma").val();
                    $.ajax({
                        url: "/Helpdesk/GetSuggestions",
                        data: { term: request.term, field: "PctLucru", firma: firma },
                        success: function (data) {
                            response(data);
                        }
                    });
                },
                minLength: 3
            });

            $("#NrTelefon").autocomplete({
                source: function (request, response) {
                    var firma = $("#Firma").val();
                    var pctLucru = $("#PctLucru").val();
                    $.ajax({
                        url: "/Helpdesk/GetSuggestions",
                        data: { term: request.term, field: "NrTelefon", firma: firma, pctLucru: pctLucru },
                        success: function (data) {
                            response(data);
                        }
                    });
                },
                minLength: 3
            });
            // Initialize flatpickr for Ora Apel
            flatpickr("#OraApel", {
                enableTime: true,
                noCalendar: true,
                dateFormat: "H:i",
                time_24hr: true,
                defaultHour: 0,
                defaultMinute: 0,
                allowInput: true
            });

            // Add event listener for input field to automatically add colon and switch to minutes
            var oraApelInput = document.getElementById("OraApel");
            oraApelInput.addEventListener("input", function (e) {
                var input = e.target;
                var value = input.value.replace(/[^0-9:]/g, ''); // Allow only digits and colon

                if (value.length === 2 && !value.includes(":")) {
                    input.value = value + ":";
                } else if (value.length > 5) {
                    input.value = value.slice(0, 5);
                }
            });

            // Handle backspace to delete characters correctly
            oraApelInput.addEventListener("keydown", function (e) {
                var input = e.target;
                var value = input.value;

                if (e.key === "Backspace") {
                    if (value.endsWith(":")) {
                        input.value = value.slice(0, -1);
                        e.preventDefault();
                    }
                }
            });

            // Switch between HH and MM with Tab and move to the next field if Tab is pressed after MM
            oraApelInput.addEventListener("keydown", function (e) {
                var input = e.target;
                var value = input.value;

                if (e.key === "Tab") {
                    if (value === "") {
                        input.blur();
                        var formElements = document.querySelectorAll("input, button, select, textarea");
                        for (var i = 0; i < formElements.length; i++) {
                            if (formElements[i] === input) {
                                formElements[i + 1].focus();
                                break;
                            }
                        }
                    } else if (value.includes(":")) {
                        if (input.selectionStart === 0) {
                            setTimeout(function () {
                                input.setSelectionRange(0, value.indexOf(":"));
                            }, 0);
                        } else if (input.selectionStart <= value.indexOf(":")) {
                            setTimeout(function () {
                                input.setSelectionRange(value.indexOf(":") + 1, value.indexOf(":") + 3);
                            }, 0);
                        } else if (input.selectionStart > value.indexOf(":") + 1) {
                            input.blur();
                            var formElements = document.querySelectorAll("input, button, select, textarea");
                            for (var i = 0; i < formElements.length; i++) {
                                if (formElements[i] === input) {
                                    formElements[i + 1].focus();
                                    break;
                                }
                            }
                        }
                    } else {
                        setTimeout(function () {
                            input.setSelectionRange(0, value.length);
                        }, 0);
                    }
                    e.preventDefault();
                }
            });

            oraApelInput.addEventListener("blur", function (e) {
                var input = e.target;
                var value = input.value;

                if (value.includes(":")) {
                    var parts = value.split(":");
                    var hh = parseInt(parts[0], 10);
                    var mm = parseInt(parts[1], 10);

                    if (isNaN(hh) || hh < 0 || hh > 23) {
                        input.value = "00:" + parts[1];
                    }
                    if (isNaN(mm) || mm < 0 || mm > 59) {
                        input.value = parts[0] + ":00";
                    }
                }
            });

            // Additional input validation for manual typing
            oraApelInput.addEventListener("input", function (e) {
                var input = e.target;
                var value = input.value.replace(/[^0-9:]/g, ''); // Allow only digits and colon

                if (value.includes(":")) {
                    var parts = value.split(":");
                    if (parts.length === 2) {
                        var hh = parts[0];
                        var mm = parts[1];

                        if (hh.length > 2) hh = hh.slice(0, 2);
                        if (mm.length > 2) mm = mm.slice(0, 2);

                        if (parseInt(hh, 10) > 23) hh = "23";
                        if (parseInt(mm, 10) > 59) mm = "59";

                        input.value = hh + ":" + mm;
                    }
                } else {
                    if (value.length > 2) value = value.slice(0, 2);
                    input.value = value;
                }
            });

            // Automatically jump from HH to MM when Tab is pressed and input is complete
            oraApelInput.addEventListener("keydown", function (e) {
                var input = e.target;
                var value = input.value;

                if (e.key === "Tab" && value.includes(":")) {
                    if (input.selectionStart <= value.indexOf(":")) {
                        setTimeout(function () {
                            input.setSelectionRange(value.indexOf(":") + 1, value.indexOf(":") + 3);
                        }, 0);
                    } else {
                        setTimeout(function () {
                            input.setSelectionRange(0, value.indexOf(":"));
                        }, 0);
                    }
                    e.preventDefault();
                }
            });

            // Add similar logic for DurataApel (HH:MM:SS)
            var durataApelInput = document.getElementById("DurataApel");
            durataApelInput.addEventListener("input", function (e) {
                var input = e.target;
                var value = input.value.replace(/[^0-9:]/g, ''); // Allow only digits and colons

                if (value.length === 2 && !value.includes(":")) {
                    input.value = value + ":";
                } else if (value.length === 5 && value.split(":").length === 2) {
                    input.value = value + ":";
                } else if (value.length > 8) {
                    input.value = value.slice(0, 8);
                }
            });

            // Handle backspace to delete characters correctly
            durataApelInput.addEventListener("keydown", function (e) {
                var input = e.target;
                var value = input.value;

                if (e.key === "Backspace") {
                    if (value.endsWith(":")) {
                        input.value = value.slice(0, -1);
                        e.preventDefault();
                    }
                }
            });

            // Switch between HH, MM, and SS with Tab and move to the next field if Tab is pressed after SS
            durataApelInput.addEventListener("keydown", function (e) {
                var input = e.target;
                var value = input.value;

                if (e.key === "Tab") {
                    if (value === "") {
                        input.blur();
                        var formElements = document.querySelectorAll("input, button, select, textarea");
                        for (var i = 0; i < formElements.length; i++) {
                            if (formElements[i] === input) {
                                formElements[i + 1].focus();
                                break;
                            }
                        }
                    } else if (value.includes(":")) {
                        var parts = value.split(":");
                        if (input.selectionStart === 0) {
                            setTimeout(function () {
                                input.setSelectionRange(0, parts[0].length);
                            }, 0);
                        } else if (input.selectionStart <= parts[0].length + 1) {
                            setTimeout(function () {
                                input.setSelectionRange(parts[0].length + 1, parts[0].length + 1 + parts[1].length);
                            }, 0);
                        } else if (input.selectionStart <= parts[0].length + 1 + parts[1].length + 1) {
                            setTimeout(function () {
                                input.setSelectionRange(parts[0].length + 1 + parts[1].length + 1, parts[0].length + 1 + parts[1].length + 1 + parts[2].length);
                            }, 0);
                        } else if (input.selectionStart >= value.length) {
                            input.blur();
                            var formElements = document.querySelectorAll("input, button, select, textarea");
                            for (var i = 0; i < formElements.length; i++) {
                                if (formElements[i] === input) {
                                    formElements[i + 1].focus();
                                    break;
                                }
                            }
                        }
                    } else {
                        setTimeout(function () {
                            input.setSelectionRange(0, value.length);
                        }, 0);
                    }
                    e.preventDefault();
                }
            });

            durataApelInput.addEventListener("blur", function (e) {
                var input = e.target;
                var value = input.value;

                if (value.includes(":")) {
                    var parts = value.split(":");
                    var hh = parseInt(parts[0], 10);
                    var mm = parseInt(parts[1], 10);
                    var ss = parseInt(parts[2], 10);

                    if (isNaN(hh) || hh < 0 || hh > 23) {
                        input.value = "00:" + parts[1] + ":" + parts[2];
                    }
                    if (isNaN(mm) || mm < 0 || mm > 59) {
                        input.value = parts[0] + ":00:" + parts[2];
                    }
                    if (isNaN(ss) || ss < 0 || ss > 59) {
                        input.value = parts[0] + ":" + parts[1] + ":00";
                    }
                }
            });

            // Additional input validation for manual typing
            durataApelInput.addEventListener("input", function (e) {
                var input = e.target;
                var value = input.value.replace(/[^0-9:]/g, ''); // Allow only digits and colons

                if (value.includes(":")) {
                    var parts = value.split(":");
                    if (parts.length === 3) {
                        var hh = parts[0];
                        var mm = parts[1];
                        var ss = parts[2];

                        if (hh.length > 2) hh = hh.slice(0, 2);
                        if (mm.length > 2) mm = mm.slice(0, 2);
                        if (ss.length > 2) ss = ss.slice(0, 2);

                        if (parseInt(hh, 10) > 23) hh = "23";
                        if (parseInt(mm, 10) > 59) mm = "59";
                        if (parseInt(ss, 10) > 59) ss = "59";

                        input.value = hh + ":" + mm + ":" + ss;
                    }
                } else {
                    if (value.length > 2) value = value.slice(0, 2);
                    input.value = value;
                }
            });

            // Automatically jump from HH to MM and MM to SS when Tab is pressed and input is complete
            durataApelInput.addEventListener("keydown", function (e) {
                var input = e.target;
                var value = input.value;

                if (e.key === "Tab" && value.includes(":")) {
                    var parts = value.split(":");
                    if (input.selectionStart <= parts[0].length) {
                        setTimeout(function () {
                            input.setSelectionRange(parts[0].length + 1, parts[0].length + 1 + parts[1].length);
                        }, 0);
                    } else if (input.selectionStart <= parts[0].length + 1 + parts[1].length) {
                        setTimeout(function () {
                            input.setSelectionRange(parts[0].length + 1 + parts[1].length + 1, parts[0].length + 1 + parts[1].length + 1 + parts[2].length);
                        }, 0);
                    } else {
                        setTimeout(function () {
                            input.setSelectionRange(0, parts[0].length);
                        }, 0);
                    }
                    e.preventDefault();
                }
            });
        });
    </script>
</body>
</html>

